{
    "contents" : "#' Make a dscicrete random variable.\n#' \n#' @param x a numberic vector giving the values of the random vairalbe.\n#' @param probs optional, a numeric vector giving the probabilities \n#'   corresponding to each x value.  If not specific, assumes all outcomes\n#'   are equally likely\n#' @export\n#' @examples\n#' dice <- rv(1:6)\n#' P(dice > 3)\n#' E(dice)\n#' P(dice > dice + 1)\nrv <- function(x, probs = NULL) {\n  if (is.rv(x)) x <- as.numeric(x)\n  if (is.null(probs)) {\n    probs <- rep(1, length(x)) / length(x)\n  }  \n  \n  ord <- order(x)\n  x <- x[ord]\n  probs <- probs[ord]\n  \n  # Simplify by summing probabilities with equal x's\n  group <- cumsum(c(TRUE, x[-1] != x[-length(x)]))\n  x <- as.vector(tapply(x, group, \"[\", 1))\n  probs <- as.vector(tapply(probs, group, sum))\n  \n  structure(x, probs = probs, class = \"rv\")\n}\n\n#' Check if an object is a discrete random variable.\n#' \n#' @export\n#' @param x object to check\n#' @examples\n#' is.rv(1:10)\n#' is.rv(rv(1:10))\nis.rv <- function(x) inherits(x, \"rv\")\n\nprobs <- function(x) attr(x, \"probs\")\n\n#' @S3method print rv\nprint.rv <- function(x, ...) {\n  X <- format(x, digits = 3)\n  P <- format(probs(x), digits = 3)\n  out <- cbind(X = X, \"P(X)\" = P)\n  rownames(out) <- rep(\"\", nrow(out))\n  print(out, quote = FALSE)\n}\n\n#' @S3method [ rv\n\"[.rv\" <- function(x, i, ...) {\n  rv(as.numeric(x)[i], prop.table(probs(x)[i]))\n}\n\n#' @S3method Math rv\nMath.rv <- function(x, ...) {\n  rv(NextMethod(), probs(x))\n}\n\n",
    "created" : 1386684595639.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3539161438",
    "id" : "64282C1D",
    "lastKnownWriteTime" : 1340328517,
    "path" : "~/Documents/courses/13-devtools/code-data/rv/checked/R/rv.r",
    "project_path" : "R/rv.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}